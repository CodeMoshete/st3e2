Shader "Billboards/BillboardInstanced" {
	Properties{
	_Color("Main Color", Color) = (1,1,1,1)
	_MainTex("Base (RGB) Trans (A)", 2D) = "white" {}
	_BumpMap("Normalmap", 2D) = "bump" {}
	_HIndex("Horizontal Index", Int) = 0
	_VIndex("Vertical Index", Int) = 0
	_Flip("Flip Scale", Int) = 1
	}

		SubShader{
		Tags
		{
			"Queue" = "Transparent"
			"IgnoreProjector" = "True"
			"RenderType" = "Transparent"
			"DisableBatching" = "True"
		}
		LOD 100

		CGPROGRAM
		#pragma multi_compile_instancing
		#pragma vertex vert
		#pragma surface surf Lambert noambient alpha:fade

		struct appdata_t
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			half4 color : COLOR0;
			float2 texcoord : TEXCOORD0;
			float2 texcoord1 : TEXCOORD1;
			float2 texcoord2 : TEXCOORD2;
			float4 tangent : TANGENT;
			UNITY_VERTEX_INPUT_INSTANCE_ID
		};

		sampler2D _MainTex;
		sampler2D _BumpMap;
		int _HIndex;
		int _VIndex;
		int _Flip;
		fixed4 _Color;

		struct Input {
			float2 uv_MainTex;
			float2 uv_BumpMap;
		};

		void Billboard(inout appdata_t v)
		{
			UNITY_SETUP_INSTANCE_ID(v);

			const float3 local = float3(v.vertex.x, v.vertex.y, 0); // this is the quad verts as generated by MakeMesh.cs in the localPos list.
			const float3 offset = v.vertex.xyz - local;

			const float3 upVector = half3(0, 1, 0);
			const float3 forwardVector = UNITY_MATRIX_IT_MV[2].xyz; // camera forward
			const float3 rightVector = normalize(cross(forwardVector, upVector));

			float3 position = 0;
			position += local.x * rightVector;
			position += local.y * upVector;
			position += local.z * forwardVector;

			v.vertex = float4(offset + position, 1);
			v.normal = forwardVector;
		}

		void vert(inout appdata_t v, out Input o)
		{
			UNITY_INITIALIZE_OUTPUT(Input, o);
			Billboard(v);
		}

		void surf(Input IN, inout SurfaceOutput o) {
			float2 test = IN.uv_MainTex.xy / 5;
			if (_Flip < 0)
			{
				test.x *= _Flip;
				test.x -= 0.2 * (4 - _HIndex);
			}
			else
			{
				test.x += 0.2 * _HIndex;
			}
			test.y += 0.2 * _VIndex;

			fixed4 c = tex2D(_MainTex, test) * _Color;
			o.Albedo = c.rgba;
			o.Alpha = c.a;
			o.Emission = c.rgb;
			o.Normal = UnpackNormal(tex2D(_BumpMap, IN.uv_BumpMap));
		}
		ENDCG
	}
}
